#!/usr/bin/env python2
# -*- encoding: utf-8 -*-
import copy
import sys
import os
import urllib
import plistlib
import unicodedata
output_path = os.path.abspath(".")

itunes_library = "./lib.xml"
itunes = plistlib.readPlist(itunes_library)

tracks = {}
genres = {}
track_errors = {}
current_playlists = []
persist_ids = {}

playlist_prefixes = u"⚙♫♪☰"
for playlist in os.listdir(output_path):
    if not os.path.isfile(playlist):
        continue
    playlist = playlist.decode("utf-8", "replace")
    if playlist[0] in playlist_prefixes:
        current_playlists.append(playlist)

for track_id in itunes["Tracks"]:
    persist_ids[track_id] = itunes["Tracks"][track_id]["Persistent ID"]

    try:
        if "Genre" in itunes["Tracks"][track_id] and itunes["Tracks"][track_id]["Genre"]:
            genre = itunes["Tracks"][track_id]["Genre"]
        else:
            genre = ""
        genre = genre.strip()
        if genre not in genres:
            genres[genre] = []
        genres[genre].append(track_id)

        loc = unicodedata.normalize('NFC', itunes["Tracks"][track_id]["Location"].decode("utf-8")).encode("utf-8")
        loc = loc.split("iTunes/Music%20Library/")
        if len(loc) >= 2:
            tracks[track_id] = urllib.unquote("itunes/%s" % "iTunes/Music%20Library/".join(loc[1:]))
        else:
            loc = unicodedata.normalize('NFC', itunes["Tracks"][track_id]["Location"].decode("utf-8")).encode("utf-8")
            loc = loc.split("iTunes/iTunes%20Media/")

            if len(loc) >= 2:
                tracks[track_id] = urllib.unquote("itunes/%s" % "iTunes/iTunes%20Media/".join(loc[1:]))
            else:
                print loc
                sys.stdout.write(".")
    except Exception, e:
        error_trackid = track_id
        if error_trackid in persist_ids:
            error_trackid = persist_ids[error_trackid]
        print "Error processing track %s:" % error_trackid,
        if "Location" not in itunes["Tracks"][track_id]:
            print "Song is likely an online iCloud or iTunes Store song."
            track_errors[track_id] = "No location field, likely online iCloud/iTunes Store song."
        else:
            track_errors[track_id] = "Unknown error, see log for details"
            print e
            print itunes["Tracks"][track_id]

playlists = {}
rootPlaylists = []
playlistTree = {}
playlistPrefix = {}

for playlist in itunes["Playlists"]:
    playlists[playlist["Playlist Persistent ID"]] = playlist

    if "Parent Persistent ID" not in playlist:
        rootPlaylists.append(playlist["Playlist Persistent ID"])
    else:
        if playlist["Parent Persistent ID"] not in playlistTree:
            playlistTree[playlist["Parent Persistent ID"]] = []
        playlistTree[playlist["Parent Persistent ID"]].append(playlist["Playlist Persistent ID"])

def checkPlaylist(id, level=0, topPath=[]):
    playlistTracks = []
    path = copy.deepcopy(topPath)
    path.append(playlists[id]["Name"].replace("/", u"／"))
    playlistPrefix[id] = u"♪"
    if "Smart Criteria" in playlists[id]:
        playlistPrefix[id] = u"⚙"
    if "Folder" in playlists[id]:
        playlistPrefix[id] = u"☰"
    if path[-1] in ["Musikk", "Bibliotek", "iTunes U", "Filmer", "Bøker", "Podcaster", "TV-programmer"]:
        return []
    print u"%s %s: %s" % (u"+"*level, id, u"／".join(path))

    if "Playlist Items" in playlists[id]:
        for trackID in playlists[id]["Playlist Items"]:
            try:
                track = tracks[str(trackID["Track ID"])]
                playlistTracks.append(track)
            except KeyError, e:
                if str(trackID["Track ID"]) in persist_ids:
                    errormsg_id = persist_ids[str(trackID["Track ID"])]
                else:
                    errormsg_id = trackID["Track ID"]
                msg = "# Unknown track ID %s" % errormsg_id
                if str(trackID["Track ID"]) in track_errors:
                    msg += ": %s" % track_errors[str(trackID["Track ID"])]
                playlistTracks.append(msg)

    def addChildTracksToSelf(childTracks):
        for track in childTracks:
            if track not in playlistTracks:
                playlistTracks.append(track)
        del childTracks

    if id in playlistTree:
        for child in playlistTree[id]:
            addChildTracksToSelf(checkPlaylist(child, level=level+1, topPath=path))

    encodedPath = u"／".join(path)
    playlist_path = u"%s %s.m3u" % (playlistPrefix[id], encodedPath)
    with open(playlist_path, "w+") as file:
        if playlistPrefix[id] != u"♪":
            playlistTracks.sort()
        for track in playlistTracks:
            file.write("%s\n" % unicodedata.normalize("NFC", track.decode("utf-8")).encode("utf-8"))
        file.close()
    if playlist_path in current_playlists:
        current_playlists.remove(playlist_path)
    if os.path.getsize(playlist_path) < 1:
        print "Deleting file %s: File is empty" % playlist_path
        os.unlink(os.path.join(output_path, playlist_path))
    return playlistTracks


for genre in genres:
    genre_name = genre.replace("/", u"／")
    if not genre_name:
        genre_name = "No Genre"
    if len(genres[genre]) < 1:
        continue

    track_count = 0
    playlist_path = u"♫ Genre／%s.m3u" % genre_name
    print "Creating %s" % playlist_path
    with open(playlist_path, "w+") as file:
        output = ""
        for track in genres[genre]:
            if track not in tracks:
                output += "# Unknown track ID %s" % persist_ids[track]
                if track in track_errors:
                    output += ": %s" % track_errors[track]
                output += "\n"
                continue
            output += "%s\n" % tracks[track]
            track_count += 1
        output = output.split("\n")
        output = "\n".join(sorted([line for line in output if line]))
        file.write(unicodedata.normalize("NFC", output.decode("utf-8")).encode("utf-8"))
        file.close()
    if playlist_path in current_playlists:
        current_playlists.remove(playlist_path)
    if os.path.getsize(playlist_path) < 1:
        print "Deleting file %s: File is empty" % playlist_path
        os.unlink(os.path.join(output_path, playlist_path))


for rootPlaylist in rootPlaylists:
    print len(checkPlaylist(rootPlaylist))


for playlist_path in current_playlists:
    if not playlist_path or not playlist_path.strip():
        continue
    print "Deleting file %s: No references found" % playlist_path
    os.unlink(os.path.join(output_path, playlist_path))
